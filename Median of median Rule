import networkx as nx
import pandas as pd
import csv


# Read the edges from the CSV file
edges = []
with open("trust item 363 delimited comma - close.csv", "r") as file:
    reader = csv.reader(file)
    for row in reader:
        try:
            edges.append(tuple(map(int, row[0].split(','))))
        except ValueError as v:
            print(v)

# Create a social network graph
graph = nx.DiGraph()

# Add edges
graph.add_weighted_edges_from(edges)

# Read the vote data from the CSV file
data = pd.read_csv('votes item 363 epinions clean removes 9% - close.csv')

# Iterate over the rows and insert vote values in the graph

social_network = {}
# Iterate over the rows and insert vote values in the social network
for row in data.itertuples(index=False):
    node = row[0]  # Assuming the node information is in the first column of the CSV
    vote = row[1]  # Assuming the vote information is in the second column of the CSV

    if node in social_network:
        social_network[node].append(vote)
    else:
        social_network[node] = [vote]

    graph.add_node(node, vote=vote)

# Retrieve the vote attributes of nodes
node_votes = nx.get_node_attributes(graph, 'vote')

# # Print the vote values of all nodes
# for node, vote in node_votes.items():
#     print(f"Node: {node}, Vote: {vote}")

# Get non-voters
non_voters = [node for node, data in graph.nodes(data=True) if data['vote'] == '-']

def median_rule(graph):
    for node, data in graph.nodes(data=True):
        if 'vote' in data:
            vote = data['vote']
            if vote == '-':
                neighbors = list(graph.successors(node))
                neighbor_votes = [int(graph.nodes[neighbor]['vote']) for neighbor in neighbors if 'vote' in graph.nodes[neighbor] and graph.nodes[neighbor]['vote'] is not None and graph.nodes[neighbor]['vote'] != '-']

                if neighbor_votes:
                    # Compute the median vote among the neighbors
                    neighbor_votes.sort()  # Sort the neighbor votes in ascending order
                    n = len(neighbor_votes)
                    median_index = n // 2  # Find the middle index

                    # Check if the number of votes is even
                    if n % 2 == 0:
                        median_vote = (neighbor_votes[median_index - 1] + neighbor_votes[median_index]) / 2
                    else:
                        median_vote = neighbor_votes[median_index]

                    # Round the median vote to the nearest integer to ensure it's a valid vote value
                    median_vote = round(median_vote)

                    # Update the non-voter's vote value with the median vote
                    graph.nodes[node]['vote'] = median_vote
                else:
                    graph.nodes[node]['vote'] = None  # Assign None as the default vote value when no neighbor votes are available

# Call the median_rule function to update votes for non-voters
median_rule(graph)

# Print the updated vote values for all nodes
for node, data in graph.nodes(data=True):
    if 'vote' in data:
        vote = data['vote']
        if vote is None:
            print(f"Node: {node}, Vote: -")
        else:
            print(f"Node: {node}, Vote: {vote}")

# Create a DataFrame to store node and vote information
data = {'node': [], 'vote': []}
for node, attributes in graph.nodes(data=True):
    data['node'].append(node)
    data['vote'].append(attributes['vote'])


# Convert the data to a DataFrame
df = pd.DataFrame(data)

# Save the DataFrame to a CSV file
df.to_csv('updated_votes median rule removes 9% - close.csv', index=False)
